version: '3.9'
services:
  api-gateway:
    container_name: stellio-api-gateway
    hostname: stellio
    labels:
      org.fiware: 'tutorial'
    image: quay.io/fiware/stellio-api-gateway:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "${EXPOSED_PORT}:${STELLIO_PORT}"

  search-service:
    container_name: stellio-search-service
    labels:
      org.fiware: 'tutorial'
    image: quay.io/fiware/stellio-search-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres/stellio_search
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres/stellio_search
      - SPRING_R2DBC_USERNAME=stellio
      - SPRING_R2DBC_PASSWORD=stellio_password
      - APPLICATION_AUTHENTICATION_ENABLED=false
    ports:
      - 8083:8083
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started

  subscription-service:
    container_name: stellio-subscription-service
    labels:
      org.fiware: 'tutorial'
    image: quay.io/fiware/stellio-subscription-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres/stellio_subscription
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres/stellio_subscription
      - SPRING_R2DBC_USERNAME=stellio
      - SPRING_R2DBC_PASSWORD=stellio_password
      - APPLICATION_AUTHENTICATION_ENABLED=false
    ports:
      - 8085:8084
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started

  kafka:
    labels:
      org.fiware: 'tutorial'
    image: confluentinc/cp-kafka:7.3.1
    container_name: kafka
    ports:
      - 29092:29092
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: CONTROLLER://kafka:29093,PLAINTEXT://kafka:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
    volumes:
      - ./stellio/kafka/update_run.sh:/tmp/update_run.sh
    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Did you forget the update_run.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"


  # Databases
  postgres:
    labels:
      org.fiware: 'tutorial'
    image: stellio/stellio-timescale-postgis:${STELLIO_TIMESCALE_POSTGIS}

    hostname: postgres
    container_name: db-postgres
    environment:
      - POSTGRES_USER=stellio
      - POSTGRES_PASS=stellio_password
      - POSTGRES_DBNAME=stellio_search,stellio_subscription
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,timescaledb,pgcrypto
      - ACCEPT_TIMESCALE_TUNING=TRUE
    ports:
      - 5432:5432
    volumes:
      - postgres-db:/var/lib/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U stellio"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s

  # Tutorial acts as a series of dummy IoT Sensors over HTTP and connects to the Stellio Broker
  tutorial:
    environment:
      - IOTA_DEFAULT_RESOURCE=/iot/d
      - DUMMY_DEVICES_PORT=${TUTORIAL_DUMMY_DEVICE_PORT} # Port used by the dummy IOT devices to receive commands
      - DUMMY_DEVICES_TRANSPORT=HTTP # Default transport used by dummy Io devices
      - CONTEXT_BROKER=http://api-gateway:${STELLIO_PORT}/ngsi-ld/v1 # URL of the context broker to update context
     
volumes:
  postgres-db: ~
